#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#define max_path_length 100

long long hash (char str[]) {
	int len = strlen(str);
	const int p = 31;
	const int m = 1e9 + 9;
	long long hash_val = 0;
	long long p_pow = 1;
	for (int i = 0; i < len; i++) {	
		hash_val = (hash_val + (str[i] - 'a' + 1) * p_pow) % m;
		p_pow = (p_pow * p) % m;
	}
	return hash_val;
}

long long pos [max_path_length][max_path_length];

int do_work(int case_num) {
	memset(pos, 0, sizeof(pos));
	printf("Case #%d: ", case_num + 1);
	int n, m;
	scanf("%d %d\n",&n, &m);
	//printf("%d %d\n", n, m);
	for (int i = 0; i < n; i++) {
		char str[max_path_length];
		fgets(str, max_path_length, stdin);
		//printf("str = %s", str);
		int len = strlen(str);
		int start = 1;
		int loc = 0;
		for (int j = 1; j < len; j++) {
			if ((str[j] == '/') || j == len - 1) {
				char tmp[j - start + 1];
				memset(tmp, 0, sizeof(tmp));
				for (int k = start; k < j; k++) tmp[k - start] = str[k];
				//printf("tmp = %s\n", tmp);
				//printf("loc = %d\n", loc);
				long long h = hash(tmp);
				//printf("hash = %lld\n", h);
				start = j + 1;
				int can_found = 0;
				for (int k = 1; k < pos[loc][0]; k++) if (pos[loc][k] == h) {
					can_found = 1;
					break;
				}
				if (!can_found) {
					pos[loc][0]++;
					pos[loc][pos[loc][0]] = h;
				}
			}
		}
	}
	
	for (int i = 0; i < 3; i++) {
		for (int j = 1; j <= pos[i][0]; j++) printf("%lld ", pos[i][j]);
		printf("\n");
	}

	int ans = 0;
	for (int i = 0; i < m; i++) {
		char str[max_path_length];
		fgets(str, max_path_length, stdin);
		int len = strlen(str);
		int start = 1;
		int loc = 0;
		for (int j = 1; j < len; j++) {
			if ((str[j] == '/') || j == len - 1) {
				char tmp[j - start + 1];
				memset(tmp, 0, sizeof(tmp));
				for (int k = start; k < j; k++) tmp[k - start] = str[k];
				printf("tmp = %s\n", tmp);
				printf("loc = %d\n", loc);
				start = j + 1;
				long long hash_val = hash(tmp);
				printf("hash = %lld\n", hash_val);
				int can_found = 0;
				for (int k = 1; k <= pos[loc][0]; k++) if (pos[loc][k] == hash_val) {
					can_found = 1;
					break;
				}
				if (!can_found) {
					ans ++;
					pos[loc][0]++;
					pos[loc][pos[loc][0]] = hash_val;
				}
				loc ++;
			}
		}
	}

	for (int i = 0; i < 3; i++) {
		for (int j = 1; j <= pos[i][0]; j++) printf("%lld ", pos[i][j]);
		printf("\n");
	}

	printf("%d\n", ans);
	return 0;
}

int t;

int main () {
	freopen("file.in", "r", stdin);
	freopen("file.ans", "w", stdout);
	scanf("%d\n", &t);
	for (int i = 0; i < t; i++) do_work(i);
	fclose(stdin);
	fclose(stdout);
	return 0;
}

